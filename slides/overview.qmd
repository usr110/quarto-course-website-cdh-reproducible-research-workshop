---
title: "Open Research, Collaboration and Publishing with GitHub"
author: "Ali Abbas"
format: 
  revealjs:
    slide-number: true
    incremental: false
    transition: fade
    background-transition: fade
    highlight-style: github
    theme: solarized
    smaller: true
    code-line-numbers: true
    scrollable: true
    auto-stretch: true
    code-overflow: wrap
    code-copy: true
    code-link: true
pagetitle: "CDH Reproduciblity Workshop"
footer: "[CDH Reproduciblity Workshop - https://tinyurl.com/cdh-repro](https://usr110.github.io/quarto-course-website-cdh-reproducible-research-workshop/)"
engine: knitr
---

```{css echo=FALSE}
.small-code{
  font-size: 65%  
}
```

## Overview

-   [Open Research, Collaboration and Publishing with GitHub](https://usr110.github.io/quarto-course-website-cdh-reproducible-research-workshop/)
    -   Including slides
    -   Example project

::: fragment
[Source code for the website](https://github.com/usr110/quarto-course-website-cdh-reproducible-research-workshop/)
:::

# Reproducibility Crisis {background-image="https://geneticliteracyproject.org/wp-content/uploads/2019/05/replication-yellow-art-.jpg" background-size="cover" background-color="white"}

## Reproducibility crisis in research

• [Over 70% of researchers have tried and failed to reproduce another scientist's experiments, and more than half have failed to reproduce their own experiments](https://www.nature.com/articles/533452a)

• [A survey revealed that 52% of researchers believed there was a "significant reproducibility crisis" in science](https://www.cam.ac.uk/research/discussion/opinion-the-science-reproducibility-crisis-and-what-can-be-done-about-it)

• [Factors contributing to reproducibility issues include pressure to publish, selective reporting, insufficient replication in labs, poor oversight, and low statistical power](https://www.nature.com/articles/533452a)

• [The reproducibility crisis affects multiple scientific fields, including psychology, medicine, genetics, and oncology, with some studies finding reproducibility rates as low as 10-40% in certain areas](https://pmc.ncbi.nlm.nih.gov/articles/PMC5579390/)

## Learning objectives

-   Learn what `Git` is all about
    -   History
    -   Objectives
-   Organize your work using a repository
    -   Existing work
    -   Create new work
-   Publish your work on GitHub
-   Share your work for collaboration

## Website

[![Website for the workshop](images/website.png){fig-align="center"}](https://usr110.github.io/quarto-course-website-cdh-reproducible-research-workshop/)

## Structure of the day

| Topic | Slides/content |
|------------------------------------|------------------------------------|
| Overview with the focus on Git and GitHub | [Overview](slides/overview.html "Overview") |
| Introduction to Quarto | [Quarto](slides/quarto_intro.html "Introduction to Quarto") |
| Publishing using Zenodo | interactive |

: Worskshop structure

# Git {#git background-image="https://www.20i.com/blog/wp-content/uploads/2022/08/git-blog-header-740x416.png" background-size="cover" background-color="white" style="purple"}

## Git history

-   Background: relationship between Linux and Bitkeeper (a distributed version control systems (DVCS)) broke down
-   Based on lessons learned, Linus Torvalds (the creator of Linux) developed his own version control system (VCS) and called it Git (2005) with:
    -   Speed
    -   Simple design
    -   Strong support for non-linear development (thousands of parallel branches)
    -   Fully distributed
    -   Able to handle large projects like the Linux kernel efficiently (speed and data size)

::: fragment
source: https://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git
:::

## Key milestones

Key Milestones in Git’s development:

-   Initial release and Git 1.0 (2005): From first version of Git to a broader usage, beyond the Linux kernel project, with version 1.0
-   GitHub Launch (2008): a web-based platform for hosting Git repositories, revolutionized how developers collaborated on open-source projects. GitHub’s user-friendly interface and social features accelerated Git’s adoption.
-   Wide Adoption (2010s): From 2010s, git became the standard VCS

::: fragment
Source: https://www.geeksforgeeks.org/history-of-git/
:::

## Git comic

[![What git is all about?](https://imgs.xkcd.com/comics/git.png){fig-align="center" width="438"}](https://xkcd.com/1597/)

## Configuring Git

Setting up user name and email

```{bash}
#| eval: false 
#| code-line-numbers: "|1|2"
#| echo: true
git config --global user.name '[first name] [second name]'
git config --global user.email '[email address]'

```

If you are concerned about privacy, please review [GitHub’s instructions for keeping your email address private](https://help.github.com/articles/keeping-your-email-address-private/).

## Set Personal Access Token (PAT)

PAT to communicate with Github requires:

-   Visit [Github token generator](https://github.com/settings/tokens)
    -   Or from R, use `usethis::create_github_token()`
-   Select these scopes at a minimum: *repo*, *user*, and *workflow*
-   Press **Generate token**
-   Copy the generated PAT to your clipboard - and save it in a notepad
-   Provide this PAT next time a Git operation asks for your password or store it by calling `gitcreds::gitcreds_set()`

::: fragment
Instructions from: [Happy Git and GitHub for the useR](https://happygitwithr.com/https-pat)
:::

## Git commit

Git has four main states that your files can be in:

-   Untracked: You've created a new file and not told git to keep track of it.
-   Modified: You've changed a file that git already has a record of, but have not told git to include these changes in your next commit. We say these files are in the `working tree`.
-   Staged: You've told git to include the file next time you do a commit. We say these files are in the `staging area`.
-   Committed: The file is saved in it's present state in the most recent commit.

## At each step in the process, the file is stored in a different area:

![](images/git_areas.png)

## Exercise: create a git repo on Github

go to github.com/user_github_username

![](images/new_repo1.png)

## Create new repo

Go to <https://github.com/new> and then specify repository name

![](images/new_repo2.png)

Leave all things as is - don't add README file or change any other option

## Locally create a git repo

Go to the directory where you'd like to create a git repo - say `C:/Github` <!-- <div class=small-code> -->

```{bash}
#| eval: false 
#| code-line-numbers: "|2|4|6|8|10|12|14|16"
#| echo: true
# Initialized a git repository called `test_repo`
git init NAME_OF_THE_REPO
# go to the newly created dir
cd NAME_OF_THE_REPO
# Add some text to README.md
echo "# name_of_the_repo" >> README.md 
# Add README.md to git
git add README.md 
# Make a first commit
git commit -m "init commit - add README.md" 
# Rename branch name to main
git branch -M main 
# Add remote origin
git remote add origin https://github.com/GITHUB_USERNAME/NAME_OF_THE_REPO.git 
# Git push
git push -u origin main
```

<!-- </div> -->

## Git help and manual

In case you forget options of a command, you can access the relevant list of options typing `git <command> -h` or access the corresponding Git manual by typing `git <command> --help`, e.g.:

```{bash}
#| eval: false 

git config -h
git config --help
```

## Exercise: Create an untracked file

<br>- Create a new file in your repository.

```{=html}
<pre><code>
$ notepad new.txt 
</code></pre>
```

<br> Lets check what git can see...

```{=html}
<pre><code>
$ git status
</code></pre>
```

::: {.callout-tip title="git status"}
Highlights your working branch -\> main <br> Reports commit status -\> none yet <br>Highlights untracked files -\> new.txt <br>Proposes adding these to git with 'git add'
:::

## Exercise: create a git branch

-   Create a new branch using: `git branch my-shiny-new-branch`
-   Checkout the branch using: `git checkout my-shiny-new-branch`
-   Make a change in your new branch by editing new.txt and committing the changes.
-   Note: you can combine the first two steps into one using `git checkout -b my-shiny-new-branch`
-   Optional: set it upstream by `git push --set-upstream origin my-shiny-new-branch`

## Exercise: switch between branches

<br> ![creating branch and checking out](images/creating_branch_and_checking_out.png){width="35%"}

## Advanced Git Concepts

[Not covered]{style="color:red;"}

-   Merging branches
-   Resolving merge conflicts
-   Git rebase
-   Rewriting commit history

## Git Merge

[![How git merge works](images/git_merge.png)](https://medium.com/@lovepreet013singhhundal/git-merge-vs-git-rebase-d386e1f3cda7)

## Git Rebase

![How git rebase works](images/git_rebase.png){fig-alt="https://medium.com/@lovepreet013singhhundal/git-merge-vs-git-rebase-d386e1f3cda7"}

## GitHub Desktop

[![GitHub Desktop](images/screenshot-windows-dark.png)](https://github.com/apps/desktop)

## To clone or to fork (1/2)?

Use a *clone* when:

-   Collaboration (team or owner) OR all of the following is true:

-   It is owned by someone else and you are happy not to have ownership of the codebase

-   You have permission to push branches up to the repo

-   You want easy access to the latest changes made by others to the central repository

-   You want the main branch in the repo to be updated and edited by others working on the project

## To clone or to fork (2/2)?

Use a *fork* when:

-   The owner of the repo is not someone you are actively collaborating with
-   You want to take the development of the code in a different direction from the original owner of the repo
-   You want full ownership over your version of the codebase
-   You want complete control over other's contributions to the codebase
-   You do not want or have permission on the main branch

## GitHub

-   GitHub is a website that lets you store your repository publicly for free
-   Allows to create, store, manage and share code

::: fragment
![](images/github.png)
:::

## Overview of an example repo

[![A repo of Integrated Transport and Health Impact Modelling Tool (ITHIM)](images/ithim_repo.png){fig-align="center" width="1802"}](https://github.com/ITHIM/ITHIM-R)

## Publishing Repositories on GitHub

-   Creating a New Repository on GitHub Public vs. private repositories

-   Pushing Local Repositories to GitHub

    -   git remote add and git push commands

    -   README and Documentation

-   Importance of clear project descriptions {{< fa thumbs-up >}}

-   Licensing

-   Your Project Choosing an open source license GitHub Releases Tagging and creating releases

## Best practices for project organization

-   Treat data as read only
-   Describe data cleaning/wrangling steps
-   Treat generated output as disposable
-   Separate function definition and application
-   Save the data in the data directory

::: fragment
[source](https://swcarpentry.github.io/r-novice-gapminder/02-project-intro.html#best-practices-for-project-organization)
:::

## How to name files

-   Avoid spaces
-   Number them with to follow order with a prefix as `01_read_data.R` for the first file in the analysis
-   For dates in filenames, use the ISO 8601 format YYYY-MM-DD (or YYYYMMDD) to ensure your files are listed in proper chronological order.
-   Never use the word final in any file name - it never is!

::: fragment
source: [An introduction to R](https://intro2r.com/file_names.html)
:::

## Create New project

We’re going to create a new project in RStudio:

-   Click the “File” menu button, then “New Project”.

![](images/New%20Project.png){width="87%"} \## Select project type

## Select project Type

![](images/New%20Project%20Type.png)

-   Click “New Directory”.

-   Click “New Project”.

-   Type in the name of the directory to store your project, e.g. “my_project”.

-   If available, select the checkbox for “Create a git repository.”

-   Click the “Create Project” button.

## New project type

::::: columns
::: {.column width="50%"}
![](images/New%20Project%20Type.png)
:::

::: {.column width="50%"}
![](images/image_2.jpg)

![](images/image_3.jpg)
:::
:::::
