---
title: "Overview"
author: "Ali Abbas"
format: 
  revealjs:
    slide-number: true
    incremental: true
    transition: fade
    background-transition: fade
    highlight-style: github
    theme: solarized
    #history: false
    smaller: true
    code-line-numbers: true
    # scrollable: false
    # auto-stretch: true
    # code-overflow: wrap
    # code-copy: true
    # code-link: true
pagetitle: "CDH Reproduciblity Workshop"
footer: "[CDH Reproduciblity Workshop](https://tinyurl.com/cdh-repro)"
engine: knitr
---

```{css echo=FALSE}
.small-code{
  font-size: 65%  
}
```

## Overview

-   [Open Research, Collaboration and Publishing with GitHub](https://usr110.github.io/quarto-course-website-cdh-reproducible-research-workshop/)
    -   Including slides
    -   Example project

::: fragment
[Source code for the website](https://github.com/usr110/quarto-course-website-cdh-reproducible-research-workshop/)
:::

## Learning objectives

-   Learn what Git is all about
    -   History
    -   Objectives
-   Organize your work using a repository
    -   Existing work
    -   Create new work
-   Publish your work on GitHub
-   Share your work for collaboration

## Structure

| Topic          | Slides/content |
|----------------|----------------|
| Git and GitHub | slides         |
| Quarto         | slides         |
| Publishing     | interactive    |

: Worskshop structure

# Git {#git background-image="https://www.20i.com/blog/wp-content/uploads/2022/08/git-blog-header-740x416.png" background-size="cover" background-color="white" style="purple"}

## Git history

-   Background: relationship between Linux and Bitkeeper (a distributed version control systems (DVCS)) broke down
-   Based on lessons learned, Linus Torvalds (the creator of Linux) developed his own version control system (VCS) and called it Git (2005) with:
    -   Speed
    -   Simple design
    -   Strong support for non-linear development (thousands of parallel branches)
    -   Fully distributed
    -   Able to handle large projects like the Linux kernel efficiently (speed and data size)

::: fragment
source: https://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git
:::

## Key milestones

Key Milestones in Git’s development:

-   Initial release and Git 1.0 (2005): From first version of Git to a broader usage, beyond the Linux kernel project, with version 1.0
-   GitHub Launch (2008): a web-based platform for hosting Git repositories, revolutionized how developers collaborated on open-source projects. GitHub’s user-friendly interface and social features accelerated Git’s adoption.
-   Wide Adoption (2010s): From 2010s, git became the standard VCS

::: fragment
Source: https://www.geeksforgeeks.org/history-of-git/
:::

## Structure of the day

## ![](images/clipboard-1853622581.png)

## Git related

-   [Github skills](https://skills.github.com/)
-   [Happy git with R](https://happygitwithr.com/)
-   \[\]

## GitHub

-   GitHub is a website that lets you store your repository publicly for free
-   Allows to create, store, manage and share code

::: fragment
![](images/github.png)
:::

## Git workflow

![](images/git_areas.png)

## Configuring Git

Setting up user name and email

```{bash}
#| eval: false 
#| code-line-numbers: "|1|2"
#| echo: true
git config --global user.name '[first name] [second name]'
git config --global user.email '[email address]'

```

If you are concerned about privacy, please review [GitHub’s instructions for keeping your email address private](https://help.github.com/articles/keeping-your-email-address-private/).

## Git commit

Git has four main states that your files can be in:

-   Untracked: You've created a new file and not told git to keep track of it.
-   Modified: You've changed a file that git already has a record of, but have not told git to include these changes in your next commit. We say these files are in the working tree.
-   Staged: You've told git to include the file next time you do a commit. We say these files are in the staging area.
-   Committed: The file is saved in it's present state in the most recent commit.

## At each step in the process, the file is stored in a different area:

![](images/show_different_file_states.png)

::: fragment
![](images/github.png)
:::

## Exercise: create a git repo on Github

go to github.com/user_github_username

![](images/clipboard-1784368890.png)

## Create new repo

Go to <https://github.com/new> and then specify repository name

![](images/clipboard-1814069645.png)

Leave all things as is - don't add README file or change any other option

## Locally create a git repo

Go to the directory where you'd like to create a git repo - say `C:/Github` <!-- <div class=small-code> -->

```{bash}
#| eval: false 
#| code-line-numbers: "|2|4|6|8|10|12|14|16"
#| echo: true
# Initialized a git repository called `test_repo`
git init test_repo
# go to the newly created dir
cd test_repo
# Add some text to README.md
echo "# name_of_the_repo" >> README.md 
# Add README.md to git
git add README.md 
# Make a first commit
git commit -m "init commit - add README.md" 
# Rename branch name to main
git branch -M main 
# Add remote origin
git remote add origin https://github.com/GITHUB_USERNAME/GITHUB_REPO_NAME.git 
# Git push
git push -u origin main
```

<!-- </div> -->

## Git help and manual

In case you forget options of a command, you can access the relevant list of options typing `git <command> -h` or access the corresponding Git manual by typing `git <command> --help`, e.g.:

```{bash}
#| eval: false 

git config -h
git config --help
```

<!-- ## Create git repo -->

<!-- Creating a Repository git init command Basic Git Workflow Working directory, staging area, and repository Making Commits git add and git commit commands Viewing History git log command -->

## Exercise 2a, create an untracked file:

<br>- Create a new file in your repository.

::: {style="background-color: black; color: white; padding: 10px; border-radius: 5px; font-family: monospace;"}
```{=html}
<pre><code>
$ touch new.txt
$ code new.txt
</code></pre>
```
:::

<br> Lets check what git can see...

::: {style="background-color: black; color: white; padding: 10px; border-radius: 5px; font-family: monospace;"}
```{=html}
<pre><code>
$ git status
</code></pre>
```
:::

::: {.callout-tip title="git status"}
Highlights your working branch -\> main <br> Reports commit status -\> none yet <br>Highlights untracked files -\> new.txt <br>Proposes adding these to git with 'git add'
:::

## Advanced Git Concepts

Branching in Git Creating and switching branches Merging Branches Fast-forward and three-way merges Resolving Merge Conflicts Manual conflict resolution Git Rebase Rewriting commit history

## GitHub Desktop

[![GitHub Desktop](images/screenshot-windows-dark.png)](https://github.com/apps/desktop)

## The Rise of GitHub

```         
GitHub's Founding in 2008
    Tom Preston-Werner, Chris Wanstrath, and PJ Hyett
GitHub's Growth
    Key milestones and user statistics2
Microsoft's Acquisition in 2018
    Impact on the developer community
GitHub's Role in Open Source
    Hosting millions of public repositories2
```

## GitHub Features

Repository Management Creating and organizing repositories Collaboration Tools Pull requests and code reviews Issue Tracking Bug reports and feature requests GitHub Actions Continuous Integration and Deployment GitHub Pages Hosting static websites

## To clone or to fork (1/2)?

Use a *clone* when:

-   Collaboration (team or owner) OR all of the following is true:

-   It is owned by someone else and you are happy not to have ownership of the codebase

-   You have permission to push branches up to the repo

-   You want easy access to the latest changes made by others to the central repository

-   You want the main branch in the repo to be updated and edited by others working on the project

## To clone or to fork (2/2)?

Use a *fork* when:

-   The owner of the repo is not someone you are actively collaborating with
-   You want to take the development of the code in a different direction from the original owner of the repo
-   You want full ownership over your version of the codebase
-   You want complete control over other's contributions to the codebase
-   You do not want or have permission on the main branch

## Publishing Repositories on GitHub

Creating a New Repository on GitHub Public vs. private repositories Pushing Local Repositories to GitHub git remote add and git push commands README and Documentation Importance of clear project descriptions Licensing Your Project Choosing an open source license GitHub Releases Tagging and creating releases

## Conclusion

The Future of Git and GitHub AI-powered development with GitHub Copilot Emerging trends in version control and collaboration

## Best practices for project organization

-   Treat data as read only
-   Data Cleaning
-   Treat generated output as disposable
-   Separate function definition and application
-   Save the data in the data directory

[source](https://swcarpentry.github.io/r-novice-gapminder/02-project-intro.html#best-practices-for-project-organization)

## Create New project

We’re going to create a new project in RStudio:

-   Click the “File” menu button, then “New Project”.

![](images/New%20Project.png){width="87%"} \## Select project type

## Select project Type

![](images/New%20Project%20Type.png)

-   Click “New Directory”.

-   Click “New Project”.

-   Type in the name of the directory to store your project, e.g. “my_project”.

-   If available, select the checkbox for “Create a git repository.”

-   Click the “Create Project” button.

## New project type

::::: columns
::: {.column width="50%"}
![](images/New%20Project%20Type.png)
:::

::: {.column width="50%"}
![](images/image_2.jpg)

![](images/image_3.jpg)
:::
:::::

<!-- ## Slide Backgrounds {background="#43464B"} -->

<!-- Set the `background` attribute on a slide to change the background color -->

<!-- (all CSS color formats are supported). -->

<!-- Different background transitions are available via the -->

<!-- `background-transition` option. -->

<!-- ::: footer -->

<!-- Learn more: [Slide -->

<!-- Backgrounds](https://quarto.org/docs/presentations/revealjs/#color-backgrounds) -->

<!-- ::: -->

## Quarto

[![](images/clipboard-3856080902.png)](https://quarto.org/)

## Key Features

-   Multi-language support (R, Python, Julia, Observable)
-   Multiple output formats (HTML, PDF, MS Office, etc.)
-   Reproducible research
-   Version control friendly
-   Extensible and customizable

## Document Types

Supports various document types:

-   Articles
-   Presentations
-   Websites
-   Books
-   Interactive documents

## Quarto

> Quarto® is an open-source scientific and technical publishing system built on Pandoc. You can weave together narrative text and code to produce elegantly formatted output as documents, web pages, blog posts, books and more.

. . .

No more copy-paste, no more manually rebuilding analyses from disparate components, no more dread when the data is updated and you need to run an analysis.

## Anatomy of a Quarto document

-   Metadata (YAML)

``` yaml
---
format: html
---
```

. . .

-   Code

```{r}
#| echo: fenced
#| eval: true
library(dplyr)
mtcars %>% 
  group_by(cyl) %>%
  summarize(mean = mean(mpg), .groups = "drop")
```

. . .

-   Text

``` markdown
# Heading 1
This is a sentence with some **bold text**, some *italic text* and an [image](image.png).
```

## How it works

![Python](https://quarto.org/docs/get-started/hello/images/qmd-how-it-works.png)

![R](https://quarto.org/docs/get-started/hello/images/rstudio-qmd-how-it-works.png)

## Quarto Document Structure

```         
YAML header for metadata and options
Code chunks for executable content
Markdown text for narrative and formatting
```

## Rendering in RStudio

```         
Use "Render" button or Cmd/Ctrl + Shift + K
Preview updates automatically
Option to "Render on Save" for live preview
```

## Output Formats

```         
HTML, PDF, MS Word, and more
Specify in YAML header: format: html, pdf, docx
Switch between formats using dropdown menu
```

## Code Execution

```         
Run individual chunks with "Run" button
Execute all chunks with "Run All"
Output displayed inline or in console
```

## Visual Editor

```         
WYSIWYG interface for easy editing
Insert elements with Cmd/Ctrl + / shortcut
Seamless switching between visual and source modes
```

## Advanced Features

```         
Table of contents: toc: true in YAML
Citations and bibliographies
Cross-references and equations
```

## Version Control Integration

```         
Built-in Git integration in RStudio
Commit and push changes directly from IDE
Collaborate easily with others
```

## Resources and Next Steps

```         
Quarto documentation: quarto.org
RStudio Quarto Guide
Practice with different output formats and features
```

## Quarto cli interface

```{py}
#| eval: false
#| echo: true
#| code-line-numbers: "|1|4|10|16|17"
Usage:   quarto
Version: 1.5.57

Description:

  Quarto CLI

Options:

  -h, --help     - Show this help.
  -V, --version  - Show the version number for this program.

Commands:

  render     [input] [args...]     - Render files or projects to various document types.
  preview    [file] [args...]      - Render and preview a document or website project.
  serve      [input]               - Serve a Shiny interactive document.
  create     [type] [commands...]  - Create a Quarto project or extension
  use        <type> [target]       - Automate document or project setup tasks.
  add        <extension>           - Add an extension to this folder or project
  update     [target...]           - Updates an extension or global dependency.
  remove     [target...]           - Removes an extension.
  convert    <input>               - Convert documents to alternate representations.
  pandoc     [args...]             - Run the version of Pandoc embedded within Quarto.
  typst      [args...]             - Run the version of Typst embedded within Quarto.
  run        [script] [args...]    - Run a TypeScript, R, Python, or Lua script.
  install    [target...]           - Installs a global dependency (TinyTex or Chromium).
  uninstall  [tool]                - Removes an extension.
  tools                            - Display the status of Quarto installed dependencies
  publish    [provider] [path]     - Publish a document or project to a provider.
  check      [target]              - Verify correct functioning of Quarto installation.
  help       [command]             - Show this help or the help of a sub-command.
```

