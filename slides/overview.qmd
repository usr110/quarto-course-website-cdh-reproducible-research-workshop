---
title: "Overview"
author: "Ali Abbas"
format: 
  revealjs:
    slide-number: true
    transition: fade
    background-transition: fade
    highlight-style: ayu-mirage
    theme: solarized
    chalkboard: true
code-link: true
engine: knitr
editor: 
  markdown: 
    wrap: 72
---

## Overview

-   [Open Research, Collaboration and Publishing with
    GitHub](https://usr110.github.io/quarto-course-website-cdh-reproducible-research-workshop/)
    -   Including slides
    -   Example project
-   [Source code for the
    website](https://github.com/usr110/quarto-course-website-cdh-reproducible-research-workshop/)

## Learning objectives

-   Learn what Git is all about
    -   History
    -   Objectives
-   Organize your work using a repository
    -   Existing work
    -   Create new work
-   Publish your work on GitHub
-   Share your work for collaboration

### Git history

-   Background: Relationship between Linux and Bitkeeper (a distributed
    version control systems (DVCS)) broke down
-   Based on lessons learned, Linus Torvalds (the creator of Linux)
    develop their own version control system (VCS) and called it
    Git (2005) with:
    -   Speed
    -   Simple design
    -   Strong support for non-linear development (thousands of parallel
        branches)
    -   Fully distributed
    -   Able to handle large projects like the Linux kernel efficiently
        (speed and data size)

source:
https://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git

### Key milestones

Key Milestones in Git’s development

-   Initial release and Git 1.0 (2005): From first version of Git to a
    broader usage, beyond the Linux kernel project, with version 1.0
-   GitHub Launch (2008): a web-based platform for hosting Git
    repositories, revolutionized how developers collaborated on
    open-source projects. GitHub’s user-friendly interface and social
    features accelerated Git’s adoption.
-   Wide Adoption (2010s): From 2010s, git became the standard VCS

Source: https://www.geeksforgeeks.org/history-of-git/

## Structure of the day

![](images/clipboard-2802054360.png)Website

## Resources

### Git related

-   [Github skills](https://skills.github.com/)
-   [Happy git with R](https://happygitwithr.com/)
-   \[\]

### Generic

```         
The Carpentries offers a lot of materials for learning R, including:
    A thorough lesson on R programming for reproducible analyses
    Data analyses and visualization in R for ecologists
    Data analyses and visualization in R for social scientists
    Working with geospatial data in R
IBM Data Scientist Kelsey Gonzalez’s lessons on YouTube
```

### Git workflow

![](images/git_areas.png)

### GitHub 

-   GitHub is a commercial website that lets you store your repository
    publicly for free
-   Allows developers to create, store, manage and share their code

![](images/github.png){.r-stretch}



## Introduction

### Git and GitHub: A Journey Through Version Control

### What is Version Control?

-   Definition and importance
-   Brief history of version control systems

## The Birth of Git

```         
Linus Torvalds and the Linux Kernel
    Challenges with BitKeeper
Git's Creation in 2005
    Designed for speed, efficiency, and distributed development
Key Features of Git
    Distributed nature
    Branching and merging
    Integrity and security
```

## Git Basics

### Installing Git

#### Command-line and GUI options

### Configuring Git

```         
Setting up user name and email
```

```{bash}
#| eval: false 
 
git config --global user.name '[first name] [second name]'
git config --global user.email '[email address]'
```

If you are concerned about privacy, please review [GitHub’s instructions for keeping your email address private](https://help.github.com/articles/keeping-your-email-address-private/).


### Git help and manual

Git Help and Manual

In case you forget options of a command, you can access the relevant list of options typing `git <command> -h` or access the corresponding Git manual by typing `git <command> --help`, e.g.:

```{bash}
#| eval: false 

git config -h
git config --help
```



## Create git repo         
Creating a Repository
    git init command
Basic Git Workflow
    Working directory, staging area, and repository
Making Commits
    git add and git commit commands
Viewing History
    git log command

## Advanced Git Concepts

Branching in Git Creating and switching branches Merging Branches
Fast-forward and three-way merges Resolving Merge Conflicts Manual
conflict resolution Git Rebase Rewriting commit history

## test

::::: columns
::: {.column width="40%"}
-   assadads
:::

::: {.column width="60%"}
-   asdad
-   asdasd
:::
:::::

## The Rise of GitHub

```         
GitHub's Founding in 2008
    Tom Preston-Werner, Chris Wanstrath, and PJ Hyett
GitHub's Growth
    Key milestones and user statistics2
Microsoft's Acquisition in 2018
    Impact on the developer community
GitHub's Role in Open Source
    Hosting millions of public repositories2
```

## GitHub Features

```         
Repository Management
    Creating and organizing repositories
Collaboration Tools
    Pull requests and code reviews
Issue Tracking
    Bug reports and feature requests
GitHub Actions
    Continuous Integration and Deployment
GitHub Pages
    Hosting static websites
```

## Publishing Repositories on GitHub

```         
Creating a New Repository on GitHub
    Public vs. private repositories
Pushing Local Repositories to GitHub
    git remote add and git push commands
README and Documentation
    Importance of clear project descriptions
Licensing Your Project
    Choosing an open source license
GitHub Releases
    Tagging and creating releases
```

## Conclusion

```         
The Future of Git and GitHub
    AI-powered development with GitHub Copilot
    Emerging trends in version control and collaboration
    
    
```

## Best practices for project organization

-   Treat data as read only
-   Data Cleaning
-   Treat generated output as disposable

[source](https://swcarpentry.github.io/r-novice-gapminder/02-project-intro.html#best-practices-for-project-organization)

## Create a new project

## Create New project

We’re going to create a new project in RStudio:

-   Click the “File” menu button, then “New Project”.

![](images/New%20Project.png) \## Select project type

-   Select type of project

![](images/New Project Type.png)

-   Click “New Directory”.

-   Click “New Project”.

-   Type in the name of the directory to store your project, e.g.
    “my_project”.

-   If available, select the checkbox for “Create a git repository.”

-   Click the “Create Project” button.


## New project type

::: columns
::: {.column width="50%"}
![](images/New Project Type.png)
:::

::: {.column width="50%"}
![](images/image_2.jpg)

![](images/image_3.jpg)
:::
:::
<!-- ## Slide Backgrounds {background="#43464B"} -->

<!-- Set the `background` attribute on a slide to change the background color -->
<!-- (all CSS color formats are supported). -->

<!-- Different background transitions are available via the -->
<!-- `background-transition` option. -->

<!-- ::: footer -->
<!-- Learn more: [Slide -->
<!-- Backgrounds](https://quarto.org/docs/presentations/revealjs/#color-backgrounds) -->
<!-- ::: -->
